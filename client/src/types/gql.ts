/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\nmutation Login($email: String!, $password: String!) {\n    login(LoginInput: { email: $email, password: $password }){\n        ID\n        email\n        name\n        surname\n        patronymic\n        department\n        isActivated\n        register_date\n        updated_date\n        avatar {\n            ID\n            url\n            originalName\n        }\n    }\n}\n": typeof types.LoginDocument,
    "\n    mutation Logout {\n        logout\n    }\n": typeof types.LogoutDocument,
    "\nmutation Register(\n    $email: String!, \n    $name: String!, \n    $surname: String!, \n    $patronymic: String!,\n    $password: String! \n    ) {\n    register(\n        RegisterInput: { \n        email: $email, \n        name: $name, \n        surname: $surname, \n        patronymic: $patronymic, \n        password: $password }\n    )\n}\n": typeof types.RegisterDocument,
    "\n    mutation Confirm($email: String!, $activationToken: String!) {\n        confirm(ConfirmToken: { email: $email, activationToken: $activationToken })\n    }\n": typeof types.ConfirmDocument,
    "\n    mutation Forgot( $email: String! ) {\n        forgot(ForgotPassInput: { email: $email })\n    }": typeof types.ForgotDocument,
    "\n    mutation UpdatePass(\n        $email: String!,\n        $password: String!,\n        $token: String!,\n        $double_password: String!\n    ) {\n        updatePass(\n            ForgotPass: { \n                email: $email, \n                password: $password, \n                token: $token, \n                double_password: $double_password \n            }\n            )\n    }\n    ": typeof types.UpdatePassDocument,
    "\n    mutation ChangePassword($ID: Int!, $currentPassword: String!, $newPassword: String!, $repeatNewPassword: String!) {\n    changePassword(\n        Input: {\n            ID: $ID\n            currentPassword: $currentPassword\n            newPassword: $newPassword\n            repeatNewPassword: $repeatNewPassword\n        }\n    ) {\n        ID\n    }\n}\n\n    ": typeof types.ChangePasswordDocument,
    "\n    query GetUserSessions($email: String!) {\n    getUserSessions(email: $email) {\n        session_uuid\n        device {\n            userAgent\n            ip\n        }\n        deviceId\n        expireIn\n        }\n    }\n    ": typeof types.GetUserSessionsDocument,
    "\n    query GetCurrentUserSessions {\n    getCurrentUserSessions {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n    getCurrentUserSession {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n}\n    ": typeof types.GetCurrentUserSessionsDocument,
    "\n                    mutation Kill_session($session_uuid: String!) {\n                kill_session(session_uuid: $session_uuid)\n            }\n        ": typeof types.Kill_SessionDocument,
    "\n    mutation FogotPassword($email: String!) {\n        forgot(ForgotPassInput: { email: $email })\n    }\n": typeof types.FogotPasswordDocument,
    "\n        mutation Kill_all_sessions {\n            kill_all_sessions\n        }\n        ": typeof types.Kill_All_SessionsDocument,
    "\n    mutation CreateGroup(\n        $group_name: String!,\n        $description: String!\n        ) {\n        createGroup(CreateGroupInput: {\n                group_name: $group_name,\n                description: $description \n            }) {\n            ID\n            group_name\n            create_date\n            updated_date\n            description\n        }\n    }\n    ": typeof types.CreateGroupDocument,
    "\nmutation UpdateGroup(\n        $ID: Int!,\n        $group_name: String, \n        $description: String,\n    ) {\n    updateGroup(UpdateGroupInput: { \n            ID: $ID,\n            group_name: $group_name, \n            description: $description, \n        }) {\n        ID\n        group_name\n        create_date\n        updated_date\n        description\n    }\n    }": typeof types.UpdateGroupDocument,
    "\n    mutation RemoveGroup(\n        $RemoveGroup: Int!\n    ) {\n        removeGroup(RemoveGroup: $RemoveGroup)\n    }\n    ": typeof types.RemoveGroupDocument,
    "\n    query GetPermissionRulesByProjectID($ID: Int!) {\n        getPermissionRulesByProjectID(getPermissionRulesByProjectID: { ID: $ID }) {\n            ID\n            permissionKey {\n                ID\n                permissionKey\n                description\n            }\n            is_Project_Lead\n            is_Assegnee\n            is_Owner\n            projectRole {\n                ID\n                name\n                description\n                members {\n                    ID\n                    role {\n                        ID\n                        name\n                        description\n                        members {\n                            ID\n                            members {\n                                ID\n                                email\n                                name\n                                surname\n                                patronymic\n                                department\n                                isActivated\n                                register_date\n                                updated_date\n                            }\n                        }\n                    }\n                }\n            }\n            group {\n                ID\n                group_name\n            }\n            user {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n            }\n    \n        }\n    }\n    ": typeof types.GetPermissionRulesByProjectIdDocument,
    "\n        query GetPermissionKeys{\n        getPermissionKeys {\n            ID\n            permissionName\n            permissionKey\n            description\n        }\n    }\n        ": typeof types.GetPermissionKeysDocument,
    "\nquery GetAvailableProjects {\n    getAvailableProjects {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n": typeof types.GetAvailableProjectsDocument,
    "\nquery GetRecentProjects {\n    getRecentProjects {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n": typeof types.GetRecentProjectsDocument,
    "\nmutation DeleteProject($Input: InputID!) {\n    deleteProject(Input: $Input)\n}\n": typeof types.DeleteProjectDocument,
    "query GetAllIssuesByProjectID($Input: InputID!) {\n    getAllIssuesByProjectID(Input: $Input) {\n        ID\n        key\n        issueNum\n        issueType {\n            ID\n            name\n            icon_url\n        }\n        title\n        description\n        priority\n        create_date\n        update_date\n        due_date\n        author {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n        assignee {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n    }\n}": typeof types.GetAllIssuesByProjectIdDocument,
    "\nmutation CreateProject($lead: Int!, $project_name: String!, $key: String!, $image: Upload, $description: String) {\n    createProject(Input: {\n            lead: $lead\n            project_name: $project_name\n            key:  $key\n            image: $image\n            description: $description\n        }) {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n    }\n}\n        ": typeof types.CreateProjectDocument,
    "\n    query GetProjectByID($ID: Int!) {\n    getProjectByID(Input: { ID: $ID }) {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n    ": typeof types.GetProjectByIdDocument,
    "\n    query GetUserByID($ID: Int!) {\n        getUserByID(ID: $ID) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n    ": typeof types.GetUserByIdDocument,
    "\n        query GetCurrentUser {\n            getCurrentUser {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n                avatar {\n                    ID\n                    url\n                    originalName\n                }\n            }\n        }\n    ": typeof types.GetCurrentUserDocument,
    "\n    query GetAllUsers {\n        getAllUsers {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                originalName\n                url\n            }\n\n        }\n    }\n    ": typeof types.GetAllUsersDocument,
    "\n        query GetUserGroups($GetUserGroups: Int!) {\n            getUserGroups(GetUserGroups: $GetUserGroups) {\n                ID\n                group_name\n            }\n        }\n    ": typeof types.GetUserGroupsDocument,
    "\n        query GetUsersInGroup($GetUsersInGroup: Int!) {\n            getUsersInGroup(GetUsersInGroup: $GetUsersInGroup) {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                avatar {\n                    ID\n                }\n                updated_date\n            }\n        }\n    ": typeof types.GetUsersInGroupDocument,
    "\n    mutation CreateUser(\n            $password: String!, \n            $patronymic: String!, \n            $surname: String!, \n            $name: String!, \n            $email: String! \n    ) {\n        createUser(\n            CreateUser: { \n                password: $password, \n                patronymic:  $patronymic, \n                surname: $surname, \n                name: $name, \n                email: $email \n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n}\n    ": typeof types.CreateUserDocument,
    "\n    mutation UpdateUser(\n        $ID: Int!,\n        $email: String,\n        $name: String,\n        $surname: String,\n        $patronymic: String,\n        $password: String,\n        $department: String,\n        $isActivated: Boolean\n            ) {\n        updateUser(\n            UpdateUser: {\n                ID: $ID\n                email: $email\n                name: $name\n                surname: $surname\n                patronymic: $patronymic\n                password: $password\n                department: $department\n                isActivated: $isActivated\n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n    }\n    ": typeof types.UpdateUserDocument,
    "\n    mutation DeleteUser($ID: Int!) {\n        deleteUser(ID: $ID)\n    }": typeof types.DeleteUserDocument,
    "\nmutation UpdateMyProfile($ID: Int!, $name: String, $surname: String, $patronymic: String, $department: String, ) {\n    updateMyProfile(\n        UpdateMyProfile: { ID: $ID, name: $name, surname: $surname, patronymic: $patronymic, department: $department}\n    ) {\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            url\n            originalName\n        }\n        register_date\n        updated_date\n    }\n}\n    ": typeof types.UpdateMyProfileDocument,
    "\n        mutation SetAvatar(\n            $file: Upload!,\n        ) {\n            setAvatar(file: $file){\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            originalName\n            url\n        }\n        register_date\n        updated_date\n            }\n        }\n    ": typeof types.SetAvatarDocument,
    "\nquery GetAllStatusesByWorkflowID($ID: Int!) {\n    getStatusesByWorkflowID(getWorkflowStatuses: { ID: $ID }) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n        status_meta {\n            ID\n            posX\n            posY\n            variant\n        }\n    }\n}": typeof types.GetAllStatusesByWorkflowIdDocument,
    "\nmutation UpdateStatus(\n$ID: Int!,\n$parent: InputID!,\n$title: String,\n$is_initial:Boolean,\n$is_finished:Boolean,\n$on_process:Boolean,\n$status_meta: StatusMetaInput,\n) {\n    updateStatus(\n        createStatusInput: {\n            ID: $ID\n            parent: $parent\n            title: $title\n            is_initial: $is_initial\n            is_finished: $is_finished\n            on_process: $on_process\n            status_meta: $status_meta\n        }\n    ) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}": typeof types.UpdateStatusDocument,
    "\nmutation CreateStatus($createStatusInput: CreateOrUpdateStatusInput!) {\n    createStatus(createStatusInput: $createStatusInput) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}": typeof types.CreateStatusDocument,
    "\nmutation DeleteStatus($deleteStatusInput: InputID!) {\n    deleteStatus(deleteStatusInput: $deleteStatusInput)\n}": typeof types.DeleteStatusDocument,
    "\n    mutation CreateTransition($createOrUpdateTransitionInput: PartialTransitionInput!) {\n        createTransition(createOrUpdateTransitionInput: $createOrUpdateTransitionInput) {\n            ID\n            title\n        }\n}": typeof types.CreateTransitionDocument,
    "\nmutation SetATransitionRule($TransitionPermissionSchemeRule: TransitionPermissionSchemeRuleInput!) {\n    setATransitionRule(TransitionPermissionSchemeRule: $TransitionPermissionSchemeRule) {\n        ID\n        title\n    }\n}": typeof types.SetATransitionRuleDocument,
    "\n    query GetAllTransitionsByWorkflowID($ID: Int!) {\n        getAllTransitionsByWorkflowID(InputID: { ID: $ID }) {\n            ID\n            title\n            to {\n                ID\n            }\n            parent {\n                ID\n            }\n            transition_meta {\n                ID\n                sourceHandle\n                targetHandle\n            }\n        }\n}": typeof types.GetAllTransitionsByWorkflowIdDocument,
    "\nmutation DeleteTransition($Transition: InputID!) {\n    deleteTransition(Transition: $Transition)\n}": typeof types.DeleteTransitionDocument,
    "\nmutation CreateWorkflow($createWorkflowInput:CreateWorkflowInput! ) {\n    createWorkflow(createWorkflowInput: $createWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}": typeof types.CreateWorkflowDocument,
    "\nmutation UpdateWorkflow($updateWorkflowInput: UpdateWorkflowInput!) {\n    updateWorkflow(updateWorkflowInput: $updateWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}": typeof types.UpdateWorkflowDocument,
    "\nmutation DeleteWorkflow($Input: InputID!) {\n    deleteWorkflow(Input: $Input)\n}\n": typeof types.DeleteWorkflowDocument,
    "\n    query getAllWorkflowsByProjectID($ID: Int!) {\n        getAllWorkflowsByProjectID(Input: { ID: $ID }) {\n            ID\n            title\n            description\n            update_date\n            issueType {\n                ID\n                name\n                description\n                icon_url\n            }\n        }\n}": typeof types.GetAllWorkflowsByProjectIdDocument,
};
const documents: Documents = {
    "\nmutation Login($email: String!, $password: String!) {\n    login(LoginInput: { email: $email, password: $password }){\n        ID\n        email\n        name\n        surname\n        patronymic\n        department\n        isActivated\n        register_date\n        updated_date\n        avatar {\n            ID\n            url\n            originalName\n        }\n    }\n}\n": types.LoginDocument,
    "\n    mutation Logout {\n        logout\n    }\n": types.LogoutDocument,
    "\nmutation Register(\n    $email: String!, \n    $name: String!, \n    $surname: String!, \n    $patronymic: String!,\n    $password: String! \n    ) {\n    register(\n        RegisterInput: { \n        email: $email, \n        name: $name, \n        surname: $surname, \n        patronymic: $patronymic, \n        password: $password }\n    )\n}\n": types.RegisterDocument,
    "\n    mutation Confirm($email: String!, $activationToken: String!) {\n        confirm(ConfirmToken: { email: $email, activationToken: $activationToken })\n    }\n": types.ConfirmDocument,
    "\n    mutation Forgot( $email: String! ) {\n        forgot(ForgotPassInput: { email: $email })\n    }": types.ForgotDocument,
    "\n    mutation UpdatePass(\n        $email: String!,\n        $password: String!,\n        $token: String!,\n        $double_password: String!\n    ) {\n        updatePass(\n            ForgotPass: { \n                email: $email, \n                password: $password, \n                token: $token, \n                double_password: $double_password \n            }\n            )\n    }\n    ": types.UpdatePassDocument,
    "\n    mutation ChangePassword($ID: Int!, $currentPassword: String!, $newPassword: String!, $repeatNewPassword: String!) {\n    changePassword(\n        Input: {\n            ID: $ID\n            currentPassword: $currentPassword\n            newPassword: $newPassword\n            repeatNewPassword: $repeatNewPassword\n        }\n    ) {\n        ID\n    }\n}\n\n    ": types.ChangePasswordDocument,
    "\n    query GetUserSessions($email: String!) {\n    getUserSessions(email: $email) {\n        session_uuid\n        device {\n            userAgent\n            ip\n        }\n        deviceId\n        expireIn\n        }\n    }\n    ": types.GetUserSessionsDocument,
    "\n    query GetCurrentUserSessions {\n    getCurrentUserSessions {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n    getCurrentUserSession {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n}\n    ": types.GetCurrentUserSessionsDocument,
    "\n                    mutation Kill_session($session_uuid: String!) {\n                kill_session(session_uuid: $session_uuid)\n            }\n        ": types.Kill_SessionDocument,
    "\n    mutation FogotPassword($email: String!) {\n        forgot(ForgotPassInput: { email: $email })\n    }\n": types.FogotPasswordDocument,
    "\n        mutation Kill_all_sessions {\n            kill_all_sessions\n        }\n        ": types.Kill_All_SessionsDocument,
    "\n    mutation CreateGroup(\n        $group_name: String!,\n        $description: String!\n        ) {\n        createGroup(CreateGroupInput: {\n                group_name: $group_name,\n                description: $description \n            }) {\n            ID\n            group_name\n            create_date\n            updated_date\n            description\n        }\n    }\n    ": types.CreateGroupDocument,
    "\nmutation UpdateGroup(\n        $ID: Int!,\n        $group_name: String, \n        $description: String,\n    ) {\n    updateGroup(UpdateGroupInput: { \n            ID: $ID,\n            group_name: $group_name, \n            description: $description, \n        }) {\n        ID\n        group_name\n        create_date\n        updated_date\n        description\n    }\n    }": types.UpdateGroupDocument,
    "\n    mutation RemoveGroup(\n        $RemoveGroup: Int!\n    ) {\n        removeGroup(RemoveGroup: $RemoveGroup)\n    }\n    ": types.RemoveGroupDocument,
    "\n    query GetPermissionRulesByProjectID($ID: Int!) {\n        getPermissionRulesByProjectID(getPermissionRulesByProjectID: { ID: $ID }) {\n            ID\n            permissionKey {\n                ID\n                permissionKey\n                description\n            }\n            is_Project_Lead\n            is_Assegnee\n            is_Owner\n            projectRole {\n                ID\n                name\n                description\n                members {\n                    ID\n                    role {\n                        ID\n                        name\n                        description\n                        members {\n                            ID\n                            members {\n                                ID\n                                email\n                                name\n                                surname\n                                patronymic\n                                department\n                                isActivated\n                                register_date\n                                updated_date\n                            }\n                        }\n                    }\n                }\n            }\n            group {\n                ID\n                group_name\n            }\n            user {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n            }\n    \n        }\n    }\n    ": types.GetPermissionRulesByProjectIdDocument,
    "\n        query GetPermissionKeys{\n        getPermissionKeys {\n            ID\n            permissionName\n            permissionKey\n            description\n        }\n    }\n        ": types.GetPermissionKeysDocument,
    "\nquery GetAvailableProjects {\n    getAvailableProjects {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n": types.GetAvailableProjectsDocument,
    "\nquery GetRecentProjects {\n    getRecentProjects {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n": types.GetRecentProjectsDocument,
    "\nmutation DeleteProject($Input: InputID!) {\n    deleteProject(Input: $Input)\n}\n": types.DeleteProjectDocument,
    "query GetAllIssuesByProjectID($Input: InputID!) {\n    getAllIssuesByProjectID(Input: $Input) {\n        ID\n        key\n        issueNum\n        issueType {\n            ID\n            name\n            icon_url\n        }\n        title\n        description\n        priority\n        create_date\n        update_date\n        due_date\n        author {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n        assignee {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n    }\n}": types.GetAllIssuesByProjectIdDocument,
    "\nmutation CreateProject($lead: Int!, $project_name: String!, $key: String!, $image: Upload, $description: String) {\n    createProject(Input: {\n            lead: $lead\n            project_name: $project_name\n            key:  $key\n            image: $image\n            description: $description\n        }) {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n    }\n}\n        ": types.CreateProjectDocument,
    "\n    query GetProjectByID($ID: Int!) {\n    getProjectByID(Input: { ID: $ID }) {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n    ": types.GetProjectByIdDocument,
    "\n    query GetUserByID($ID: Int!) {\n        getUserByID(ID: $ID) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n    ": types.GetUserByIdDocument,
    "\n        query GetCurrentUser {\n            getCurrentUser {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n                avatar {\n                    ID\n                    url\n                    originalName\n                }\n            }\n        }\n    ": types.GetCurrentUserDocument,
    "\n    query GetAllUsers {\n        getAllUsers {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                originalName\n                url\n            }\n\n        }\n    }\n    ": types.GetAllUsersDocument,
    "\n        query GetUserGroups($GetUserGroups: Int!) {\n            getUserGroups(GetUserGroups: $GetUserGroups) {\n                ID\n                group_name\n            }\n        }\n    ": types.GetUserGroupsDocument,
    "\n        query GetUsersInGroup($GetUsersInGroup: Int!) {\n            getUsersInGroup(GetUsersInGroup: $GetUsersInGroup) {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                avatar {\n                    ID\n                }\n                updated_date\n            }\n        }\n    ": types.GetUsersInGroupDocument,
    "\n    mutation CreateUser(\n            $password: String!, \n            $patronymic: String!, \n            $surname: String!, \n            $name: String!, \n            $email: String! \n    ) {\n        createUser(\n            CreateUser: { \n                password: $password, \n                patronymic:  $patronymic, \n                surname: $surname, \n                name: $name, \n                email: $email \n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n}\n    ": types.CreateUserDocument,
    "\n    mutation UpdateUser(\n        $ID: Int!,\n        $email: String,\n        $name: String,\n        $surname: String,\n        $patronymic: String,\n        $password: String,\n        $department: String,\n        $isActivated: Boolean\n            ) {\n        updateUser(\n            UpdateUser: {\n                ID: $ID\n                email: $email\n                name: $name\n                surname: $surname\n                patronymic: $patronymic\n                password: $password\n                department: $department\n                isActivated: $isActivated\n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n    }\n    ": types.UpdateUserDocument,
    "\n    mutation DeleteUser($ID: Int!) {\n        deleteUser(ID: $ID)\n    }": types.DeleteUserDocument,
    "\nmutation UpdateMyProfile($ID: Int!, $name: String, $surname: String, $patronymic: String, $department: String, ) {\n    updateMyProfile(\n        UpdateMyProfile: { ID: $ID, name: $name, surname: $surname, patronymic: $patronymic, department: $department}\n    ) {\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            url\n            originalName\n        }\n        register_date\n        updated_date\n    }\n}\n    ": types.UpdateMyProfileDocument,
    "\n        mutation SetAvatar(\n            $file: Upload!,\n        ) {\n            setAvatar(file: $file){\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            originalName\n            url\n        }\n        register_date\n        updated_date\n            }\n        }\n    ": types.SetAvatarDocument,
    "\nquery GetAllStatusesByWorkflowID($ID: Int!) {\n    getStatusesByWorkflowID(getWorkflowStatuses: { ID: $ID }) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n        status_meta {\n            ID\n            posX\n            posY\n            variant\n        }\n    }\n}": types.GetAllStatusesByWorkflowIdDocument,
    "\nmutation UpdateStatus(\n$ID: Int!,\n$parent: InputID!,\n$title: String,\n$is_initial:Boolean,\n$is_finished:Boolean,\n$on_process:Boolean,\n$status_meta: StatusMetaInput,\n) {\n    updateStatus(\n        createStatusInput: {\n            ID: $ID\n            parent: $parent\n            title: $title\n            is_initial: $is_initial\n            is_finished: $is_finished\n            on_process: $on_process\n            status_meta: $status_meta\n        }\n    ) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}": types.UpdateStatusDocument,
    "\nmutation CreateStatus($createStatusInput: CreateOrUpdateStatusInput!) {\n    createStatus(createStatusInput: $createStatusInput) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}": types.CreateStatusDocument,
    "\nmutation DeleteStatus($deleteStatusInput: InputID!) {\n    deleteStatus(deleteStatusInput: $deleteStatusInput)\n}": types.DeleteStatusDocument,
    "\n    mutation CreateTransition($createOrUpdateTransitionInput: PartialTransitionInput!) {\n        createTransition(createOrUpdateTransitionInput: $createOrUpdateTransitionInput) {\n            ID\n            title\n        }\n}": types.CreateTransitionDocument,
    "\nmutation SetATransitionRule($TransitionPermissionSchemeRule: TransitionPermissionSchemeRuleInput!) {\n    setATransitionRule(TransitionPermissionSchemeRule: $TransitionPermissionSchemeRule) {\n        ID\n        title\n    }\n}": types.SetATransitionRuleDocument,
    "\n    query GetAllTransitionsByWorkflowID($ID: Int!) {\n        getAllTransitionsByWorkflowID(InputID: { ID: $ID }) {\n            ID\n            title\n            to {\n                ID\n            }\n            parent {\n                ID\n            }\n            transition_meta {\n                ID\n                sourceHandle\n                targetHandle\n            }\n        }\n}": types.GetAllTransitionsByWorkflowIdDocument,
    "\nmutation DeleteTransition($Transition: InputID!) {\n    deleteTransition(Transition: $Transition)\n}": types.DeleteTransitionDocument,
    "\nmutation CreateWorkflow($createWorkflowInput:CreateWorkflowInput! ) {\n    createWorkflow(createWorkflowInput: $createWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}": types.CreateWorkflowDocument,
    "\nmutation UpdateWorkflow($updateWorkflowInput: UpdateWorkflowInput!) {\n    updateWorkflow(updateWorkflowInput: $updateWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}": types.UpdateWorkflowDocument,
    "\nmutation DeleteWorkflow($Input: InputID!) {\n    deleteWorkflow(Input: $Input)\n}\n": types.DeleteWorkflowDocument,
    "\n    query getAllWorkflowsByProjectID($ID: Int!) {\n        getAllWorkflowsByProjectID(Input: { ID: $ID }) {\n            ID\n            title\n            description\n            update_date\n            issueType {\n                ID\n                name\n                description\n                icon_url\n            }\n        }\n}": types.GetAllWorkflowsByProjectIdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Login($email: String!, $password: String!) {\n    login(LoginInput: { email: $email, password: $password }){\n        ID\n        email\n        name\n        surname\n        patronymic\n        department\n        isActivated\n        register_date\n        updated_date\n        avatar {\n            ID\n            url\n            originalName\n        }\n    }\n}\n"): (typeof documents)["\nmutation Login($email: String!, $password: String!) {\n    login(LoginInput: { email: $email, password: $password }){\n        ID\n        email\n        name\n        surname\n        patronymic\n        department\n        isActivated\n        register_date\n        updated_date\n        avatar {\n            ID\n            url\n            originalName\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation Logout {\n        logout\n    }\n"): (typeof documents)["\n    mutation Logout {\n        logout\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Register(\n    $email: String!, \n    $name: String!, \n    $surname: String!, \n    $patronymic: String!,\n    $password: String! \n    ) {\n    register(\n        RegisterInput: { \n        email: $email, \n        name: $name, \n        surname: $surname, \n        patronymic: $patronymic, \n        password: $password }\n    )\n}\n"): (typeof documents)["\nmutation Register(\n    $email: String!, \n    $name: String!, \n    $surname: String!, \n    $patronymic: String!,\n    $password: String! \n    ) {\n    register(\n        RegisterInput: { \n        email: $email, \n        name: $name, \n        surname: $surname, \n        patronymic: $patronymic, \n        password: $password }\n    )\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation Confirm($email: String!, $activationToken: String!) {\n        confirm(ConfirmToken: { email: $email, activationToken: $activationToken })\n    }\n"): (typeof documents)["\n    mutation Confirm($email: String!, $activationToken: String!) {\n        confirm(ConfirmToken: { email: $email, activationToken: $activationToken })\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation Forgot( $email: String! ) {\n        forgot(ForgotPassInput: { email: $email })\n    }"): (typeof documents)["\n    mutation Forgot( $email: String! ) {\n        forgot(ForgotPassInput: { email: $email })\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdatePass(\n        $email: String!,\n        $password: String!,\n        $token: String!,\n        $double_password: String!\n    ) {\n        updatePass(\n            ForgotPass: { \n                email: $email, \n                password: $password, \n                token: $token, \n                double_password: $double_password \n            }\n            )\n    }\n    "): (typeof documents)["\n    mutation UpdatePass(\n        $email: String!,\n        $password: String!,\n        $token: String!,\n        $double_password: String!\n    ) {\n        updatePass(\n            ForgotPass: { \n                email: $email, \n                password: $password, \n                token: $token, \n                double_password: $double_password \n            }\n            )\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation ChangePassword($ID: Int!, $currentPassword: String!, $newPassword: String!, $repeatNewPassword: String!) {\n    changePassword(\n        Input: {\n            ID: $ID\n            currentPassword: $currentPassword\n            newPassword: $newPassword\n            repeatNewPassword: $repeatNewPassword\n        }\n    ) {\n        ID\n    }\n}\n\n    "): (typeof documents)["\n    mutation ChangePassword($ID: Int!, $currentPassword: String!, $newPassword: String!, $repeatNewPassword: String!) {\n    changePassword(\n        Input: {\n            ID: $ID\n            currentPassword: $currentPassword\n            newPassword: $newPassword\n            repeatNewPassword: $repeatNewPassword\n        }\n    ) {\n        ID\n    }\n}\n\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetUserSessions($email: String!) {\n    getUserSessions(email: $email) {\n        session_uuid\n        device {\n            userAgent\n            ip\n        }\n        deviceId\n        expireIn\n        }\n    }\n    "): (typeof documents)["\n    query GetUserSessions($email: String!) {\n    getUserSessions(email: $email) {\n        session_uuid\n        device {\n            userAgent\n            ip\n        }\n        deviceId\n        expireIn\n        }\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetCurrentUserSessions {\n    getCurrentUserSessions {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n    getCurrentUserSession {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n}\n    "): (typeof documents)["\n    query GetCurrentUserSessions {\n    getCurrentUserSessions {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n    getCurrentUserSession {\n        deviceId\n        session_uuid\n        expireIn\n        createdAt\n        device {\n            userAgent\n            ip\n        }\n    }\n}\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n                    mutation Kill_session($session_uuid: String!) {\n                kill_session(session_uuid: $session_uuid)\n            }\n        "): (typeof documents)["\n                    mutation Kill_session($session_uuid: String!) {\n                kill_session(session_uuid: $session_uuid)\n            }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation FogotPassword($email: String!) {\n        forgot(ForgotPassInput: { email: $email })\n    }\n"): (typeof documents)["\n    mutation FogotPassword($email: String!) {\n        forgot(ForgotPassInput: { email: $email })\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        mutation Kill_all_sessions {\n            kill_all_sessions\n        }\n        "): (typeof documents)["\n        mutation Kill_all_sessions {\n            kill_all_sessions\n        }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateGroup(\n        $group_name: String!,\n        $description: String!\n        ) {\n        createGroup(CreateGroupInput: {\n                group_name: $group_name,\n                description: $description \n            }) {\n            ID\n            group_name\n            create_date\n            updated_date\n            description\n        }\n    }\n    "): (typeof documents)["\n    mutation CreateGroup(\n        $group_name: String!,\n        $description: String!\n        ) {\n        createGroup(CreateGroupInput: {\n                group_name: $group_name,\n                description: $description \n            }) {\n            ID\n            group_name\n            create_date\n            updated_date\n            description\n        }\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateGroup(\n        $ID: Int!,\n        $group_name: String, \n        $description: String,\n    ) {\n    updateGroup(UpdateGroupInput: { \n            ID: $ID,\n            group_name: $group_name, \n            description: $description, \n        }) {\n        ID\n        group_name\n        create_date\n        updated_date\n        description\n    }\n    }"): (typeof documents)["\nmutation UpdateGroup(\n        $ID: Int!,\n        $group_name: String, \n        $description: String,\n    ) {\n    updateGroup(UpdateGroupInput: { \n            ID: $ID,\n            group_name: $group_name, \n            description: $description, \n        }) {\n        ID\n        group_name\n        create_date\n        updated_date\n        description\n    }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemoveGroup(\n        $RemoveGroup: Int!\n    ) {\n        removeGroup(RemoveGroup: $RemoveGroup)\n    }\n    "): (typeof documents)["\n    mutation RemoveGroup(\n        $RemoveGroup: Int!\n    ) {\n        removeGroup(RemoveGroup: $RemoveGroup)\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetPermissionRulesByProjectID($ID: Int!) {\n        getPermissionRulesByProjectID(getPermissionRulesByProjectID: { ID: $ID }) {\n            ID\n            permissionKey {\n                ID\n                permissionKey\n                description\n            }\n            is_Project_Lead\n            is_Assegnee\n            is_Owner\n            projectRole {\n                ID\n                name\n                description\n                members {\n                    ID\n                    role {\n                        ID\n                        name\n                        description\n                        members {\n                            ID\n                            members {\n                                ID\n                                email\n                                name\n                                surname\n                                patronymic\n                                department\n                                isActivated\n                                register_date\n                                updated_date\n                            }\n                        }\n                    }\n                }\n            }\n            group {\n                ID\n                group_name\n            }\n            user {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n            }\n    \n        }\n    }\n    "): (typeof documents)["\n    query GetPermissionRulesByProjectID($ID: Int!) {\n        getPermissionRulesByProjectID(getPermissionRulesByProjectID: { ID: $ID }) {\n            ID\n            permissionKey {\n                ID\n                permissionKey\n                description\n            }\n            is_Project_Lead\n            is_Assegnee\n            is_Owner\n            projectRole {\n                ID\n                name\n                description\n                members {\n                    ID\n                    role {\n                        ID\n                        name\n                        description\n                        members {\n                            ID\n                            members {\n                                ID\n                                email\n                                name\n                                surname\n                                patronymic\n                                department\n                                isActivated\n                                register_date\n                                updated_date\n                            }\n                        }\n                    }\n                }\n            }\n            group {\n                ID\n                group_name\n            }\n            user {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n            }\n    \n        }\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        query GetPermissionKeys{\n        getPermissionKeys {\n            ID\n            permissionName\n            permissionKey\n            description\n        }\n    }\n        "): (typeof documents)["\n        query GetPermissionKeys{\n        getPermissionKeys {\n            ID\n            permissionName\n            permissionKey\n            description\n        }\n    }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetAvailableProjects {\n    getAvailableProjects {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery GetAvailableProjects {\n    getAvailableProjects {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetRecentProjects {\n    getRecentProjects {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery GetRecentProjects {\n    getRecentProjects {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteProject($Input: InputID!) {\n    deleteProject(Input: $Input)\n}\n"): (typeof documents)["\nmutation DeleteProject($Input: InputID!) {\n    deleteProject(Input: $Input)\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllIssuesByProjectID($Input: InputID!) {\n    getAllIssuesByProjectID(Input: $Input) {\n        ID\n        key\n        issueNum\n        issueType {\n            ID\n            name\n            icon_url\n        }\n        title\n        description\n        priority\n        create_date\n        update_date\n        due_date\n        author {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n        assignee {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n    }\n}"): (typeof documents)["query GetAllIssuesByProjectID($Input: InputID!) {\n    getAllIssuesByProjectID(Input: $Input) {\n        ID\n        key\n        issueNum\n        issueType {\n            ID\n            name\n            icon_url\n        }\n        title\n        description\n        priority\n        create_date\n        update_date\n        due_date\n        author {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n        assignee {\n            ID\n            email\n            name\n            surname\n            patronymic\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateProject($lead: Int!, $project_name: String!, $key: String!, $image: Upload, $description: String) {\n    createProject(Input: {\n            lead: $lead\n            project_name: $project_name\n            key:  $key\n            image: $image\n            description: $description\n        }) {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n    }\n}\n        "): (typeof documents)["\nmutation CreateProject($lead: Int!, $project_name: String!, $key: String!, $image: Upload, $description: String) {\n    createProject(Input: {\n            lead: $lead\n            project_name: $project_name\n            key:  $key\n            image: $image\n            description: $description\n        }) {\n        ID\n        project_name\n        description\n        key\n        image {\n            ID\n            originalName\n            url\n        }\n    }\n}\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetProjectByID($ID: Int!) {\n    getProjectByID(Input: { ID: $ID }) {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n    "): (typeof documents)["\n    query GetProjectByID($ID: Int!) {\n    getProjectByID(Input: { ID: $ID }) {\n        ID\n        project_name\n        description\n        key\n        image{\n            ID\n            originalName\n            url\n        }\n        lead {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n}\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetUserByID($ID: Int!) {\n        getUserByID(ID: $ID) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n    "): (typeof documents)["\n    query GetUserByID($ID: Int!) {\n        getUserByID(ID: $ID) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                url\n                originalName\n            }\n        }\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        query GetCurrentUser {\n            getCurrentUser {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n                avatar {\n                    ID\n                    url\n                    originalName\n                }\n            }\n        }\n    "): (typeof documents)["\n        query GetCurrentUser {\n            getCurrentUser {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                updated_date\n                avatar {\n                    ID\n                    url\n                    originalName\n                }\n            }\n        }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllUsers {\n        getAllUsers {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                originalName\n                url\n            }\n\n        }\n    }\n    "): (typeof documents)["\n    query GetAllUsers {\n        getAllUsers {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            updated_date\n            avatar {\n                ID\n                originalName\n                url\n            }\n\n        }\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        query GetUserGroups($GetUserGroups: Int!) {\n            getUserGroups(GetUserGroups: $GetUserGroups) {\n                ID\n                group_name\n            }\n        }\n    "): (typeof documents)["\n        query GetUserGroups($GetUserGroups: Int!) {\n            getUserGroups(GetUserGroups: $GetUserGroups) {\n                ID\n                group_name\n            }\n        }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        query GetUsersInGroup($GetUsersInGroup: Int!) {\n            getUsersInGroup(GetUsersInGroup: $GetUsersInGroup) {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                avatar {\n                    ID\n                }\n                updated_date\n            }\n        }\n    "): (typeof documents)["\n        query GetUsersInGroup($GetUsersInGroup: Int!) {\n            getUsersInGroup(GetUsersInGroup: $GetUsersInGroup) {\n                ID\n                email\n                name\n                surname\n                patronymic\n                department\n                isActivated\n                register_date\n                avatar {\n                    ID\n                }\n                updated_date\n            }\n        }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateUser(\n            $password: String!, \n            $patronymic: String!, \n            $surname: String!, \n            $name: String!, \n            $email: String! \n    ) {\n        createUser(\n            CreateUser: { \n                password: $password, \n                patronymic:  $patronymic, \n                surname: $surname, \n                name: $name, \n                email: $email \n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n}\n    "): (typeof documents)["\n    mutation CreateUser(\n            $password: String!, \n            $patronymic: String!, \n            $surname: String!, \n            $name: String!, \n            $email: String! \n    ) {\n        createUser(\n            CreateUser: { \n                password: $password, \n                patronymic:  $patronymic, \n                surname: $surname, \n                name: $name, \n                email: $email \n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n}\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateUser(\n        $ID: Int!,\n        $email: String,\n        $name: String,\n        $surname: String,\n        $patronymic: String,\n        $password: String,\n        $department: String,\n        $isActivated: Boolean\n            ) {\n        updateUser(\n            UpdateUser: {\n                ID: $ID\n                email: $email\n                name: $name\n                surname: $surname\n                patronymic: $patronymic\n                password: $password\n                department: $department\n                isActivated: $isActivated\n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n    }\n    "): (typeof documents)["\n    mutation UpdateUser(\n        $ID: Int!,\n        $email: String,\n        $name: String,\n        $surname: String,\n        $patronymic: String,\n        $password: String,\n        $department: String,\n        $isActivated: Boolean\n            ) {\n        updateUser(\n            UpdateUser: {\n                ID: $ID\n                email: $email\n                name: $name\n                surname: $surname\n                patronymic: $patronymic\n                password: $password\n                department: $department\n                isActivated: $isActivated\n            }\n        ) {\n            ID\n            email\n            name\n            surname\n            patronymic\n            department\n            isActivated\n            register_date\n            avatar{\n                ID\n            }\n            updated_date\n        }\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteUser($ID: Int!) {\n        deleteUser(ID: $ID)\n    }"): (typeof documents)["\n    mutation DeleteUser($ID: Int!) {\n        deleteUser(ID: $ID)\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateMyProfile($ID: Int!, $name: String, $surname: String, $patronymic: String, $department: String, ) {\n    updateMyProfile(\n        UpdateMyProfile: { ID: $ID, name: $name, surname: $surname, patronymic: $patronymic, department: $department}\n    ) {\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            url\n            originalName\n        }\n        register_date\n        updated_date\n    }\n}\n    "): (typeof documents)["\nmutation UpdateMyProfile($ID: Int!, $name: String, $surname: String, $patronymic: String, $department: String, ) {\n    updateMyProfile(\n        UpdateMyProfile: { ID: $ID, name: $name, surname: $surname, patronymic: $patronymic, department: $department}\n    ) {\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            url\n            originalName\n        }\n        register_date\n        updated_date\n    }\n}\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        mutation SetAvatar(\n            $file: Upload!,\n        ) {\n            setAvatar(file: $file){\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            originalName\n            url\n        }\n        register_date\n        updated_date\n            }\n        }\n    "): (typeof documents)["\n        mutation SetAvatar(\n            $file: Upload!,\n        ) {\n            setAvatar(file: $file){\n        ID\n        name\n        surname\n        patronymic\n        email\n        department\n        isActivated\n        avatar {\n            ID\n            originalName\n            url\n        }\n        register_date\n        updated_date\n            }\n        }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetAllStatusesByWorkflowID($ID: Int!) {\n    getStatusesByWorkflowID(getWorkflowStatuses: { ID: $ID }) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n        status_meta {\n            ID\n            posX\n            posY\n            variant\n        }\n    }\n}"): (typeof documents)["\nquery GetAllStatusesByWorkflowID($ID: Int!) {\n    getStatusesByWorkflowID(getWorkflowStatuses: { ID: $ID }) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n        status_meta {\n            ID\n            posX\n            posY\n            variant\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateStatus(\n$ID: Int!,\n$parent: InputID!,\n$title: String,\n$is_initial:Boolean,\n$is_finished:Boolean,\n$on_process:Boolean,\n$status_meta: StatusMetaInput,\n) {\n    updateStatus(\n        createStatusInput: {\n            ID: $ID\n            parent: $parent\n            title: $title\n            is_initial: $is_initial\n            is_finished: $is_finished\n            on_process: $on_process\n            status_meta: $status_meta\n        }\n    ) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}"): (typeof documents)["\nmutation UpdateStatus(\n$ID: Int!,\n$parent: InputID!,\n$title: String,\n$is_initial:Boolean,\n$is_finished:Boolean,\n$on_process:Boolean,\n$status_meta: StatusMetaInput,\n) {\n    updateStatus(\n        createStatusInput: {\n            ID: $ID\n            parent: $parent\n            title: $title\n            is_initial: $is_initial\n            is_finished: $is_finished\n            on_process: $on_process\n            status_meta: $status_meta\n        }\n    ) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateStatus($createStatusInput: CreateOrUpdateStatusInput!) {\n    createStatus(createStatusInput: $createStatusInput) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}"): (typeof documents)["\nmutation CreateStatus($createStatusInput: CreateOrUpdateStatusInput!) {\n    createStatus(createStatusInput: $createStatusInput) {\n        ID\n        title\n        is_initial\n        is_finished\n        on_process\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteStatus($deleteStatusInput: InputID!) {\n    deleteStatus(deleteStatusInput: $deleteStatusInput)\n}"): (typeof documents)["\nmutation DeleteStatus($deleteStatusInput: InputID!) {\n    deleteStatus(deleteStatusInput: $deleteStatusInput)\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateTransition($createOrUpdateTransitionInput: PartialTransitionInput!) {\n        createTransition(createOrUpdateTransitionInput: $createOrUpdateTransitionInput) {\n            ID\n            title\n        }\n}"): (typeof documents)["\n    mutation CreateTransition($createOrUpdateTransitionInput: PartialTransitionInput!) {\n        createTransition(createOrUpdateTransitionInput: $createOrUpdateTransitionInput) {\n            ID\n            title\n        }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation SetATransitionRule($TransitionPermissionSchemeRule: TransitionPermissionSchemeRuleInput!) {\n    setATransitionRule(TransitionPermissionSchemeRule: $TransitionPermissionSchemeRule) {\n        ID\n        title\n    }\n}"): (typeof documents)["\nmutation SetATransitionRule($TransitionPermissionSchemeRule: TransitionPermissionSchemeRuleInput!) {\n    setATransitionRule(TransitionPermissionSchemeRule: $TransitionPermissionSchemeRule) {\n        ID\n        title\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllTransitionsByWorkflowID($ID: Int!) {\n        getAllTransitionsByWorkflowID(InputID: { ID: $ID }) {\n            ID\n            title\n            to {\n                ID\n            }\n            parent {\n                ID\n            }\n            transition_meta {\n                ID\n                sourceHandle\n                targetHandle\n            }\n        }\n}"): (typeof documents)["\n    query GetAllTransitionsByWorkflowID($ID: Int!) {\n        getAllTransitionsByWorkflowID(InputID: { ID: $ID }) {\n            ID\n            title\n            to {\n                ID\n            }\n            parent {\n                ID\n            }\n            transition_meta {\n                ID\n                sourceHandle\n                targetHandle\n            }\n        }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteTransition($Transition: InputID!) {\n    deleteTransition(Transition: $Transition)\n}"): (typeof documents)["\nmutation DeleteTransition($Transition: InputID!) {\n    deleteTransition(Transition: $Transition)\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateWorkflow($createWorkflowInput:CreateWorkflowInput! ) {\n    createWorkflow(createWorkflowInput: $createWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}"): (typeof documents)["\nmutation CreateWorkflow($createWorkflowInput:CreateWorkflowInput! ) {\n    createWorkflow(createWorkflowInput: $createWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateWorkflow($updateWorkflowInput: UpdateWorkflowInput!) {\n    updateWorkflow(updateWorkflowInput: $updateWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}"): (typeof documents)["\nmutation UpdateWorkflow($updateWorkflowInput: UpdateWorkflowInput!) {\n    updateWorkflow(updateWorkflowInput: $updateWorkflowInput) {\n        ID\n        title\n        description\n        create_date\n        update_date\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteWorkflow($Input: InputID!) {\n    deleteWorkflow(Input: $Input)\n}\n"): (typeof documents)["\nmutation DeleteWorkflow($Input: InputID!) {\n    deleteWorkflow(Input: $Input)\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getAllWorkflowsByProjectID($ID: Int!) {\n        getAllWorkflowsByProjectID(Input: { ID: $ID }) {\n            ID\n            title\n            description\n            update_date\n            issueType {\n                ID\n                name\n                description\n                icon_url\n            }\n        }\n}"): (typeof documents)["\n    query getAllWorkflowsByProjectID($ID: Int!) {\n        getAllWorkflowsByProjectID(Input: { ID: $ID }) {\n            ID\n            title\n            description\n            update_date\n            issueType {\n                ID\n                name\n                description\n                icon_url\n            }\n        }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;